#include <3ds.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <dirent.h>

#include "khax.h"
#include "constants.h"
#include "kernel11.h"
#include "patches.h"

static const u8 ticket_cert[] = {
  0x00, 0x01, 0x00, 0x04, 0x91, 0x9e, 0xbe, 0x46, 0x4a, 0xd0, 0xf5, 0x52,
  0xcd, 0x1b, 0x72, 0xe7, 0x88, 0x49, 0x10, 0xcf, 0x55, 0xa9, 0xf0, 0x2e,
  0x50, 0x78, 0x96, 0x41, 0xd8, 0x96, 0x68, 0x3d, 0xc0, 0x05, 0xbd, 0x0a,
  0xea, 0x87, 0x07, 0x9d, 0x8a, 0xc2, 0x84, 0xc6, 0x75, 0x06, 0x5f, 0x74,
  0xc8, 0xbf, 0x37, 0xc8, 0x80, 0x44, 0x40, 0x95, 0x02, 0xa0, 0x22, 0x98,
  0x0b, 0xb8, 0xad, 0x48, 0x38, 0x3f, 0x6d, 0x28, 0xa7, 0x9d, 0xe3, 0x96,
  0x26, 0xcc, 0xb2, 0xb2, 0x2a, 0x0f, 0x19, 0xe4, 0x10, 0x32, 0xf0, 0x94,
  0xb3, 0x9f, 0xf0, 0x13, 0x31, 0x46, 0xde, 0xc8, 0xf6, 0xc1, 0xa9, 0xd5,
  0x5c, 0xd2, 0x8d, 0x9e, 0x1c, 0x47, 0xb3, 0xd1, 0x1f, 0x4f, 0x54, 0x26,
  0xc2, 0xc7, 0x80, 0x13, 0x5a, 0x27, 0x75, 0xd3, 0xca, 0x67, 0x9b, 0xc7,
  0xe8, 0x34, 0xf0, 0xe0, 0xfb, 0x58, 0xe6, 0x88, 0x60, 0xa7, 0x13, 0x30,
  0xfc, 0x95, 0x79, 0x17, 0x93, 0xc8, 0xfb, 0xa9, 0x35, 0xa7, 0xa6, 0x90,
  0x8f, 0x22, 0x9d, 0xee, 0x2a, 0x0c, 0xa6, 0xb9, 0xb2, 0x3b, 0x12, 0xd4,
  0x95, 0xa6, 0xfe, 0x19, 0xd0, 0xd7, 0x26, 0x48, 0x21, 0x68, 0x78, 0x60,
  0x5a, 0x66, 0x53, 0x8d, 0xbf, 0x37, 0x68, 0x99, 0x90, 0x5d, 0x34, 0x45,
  0xfc, 0x5c, 0x72, 0x7a, 0x0e, 0x13, 0xe0, 0xe2, 0xc8, 0x97, 0x1c, 0x9c,
  0xfa, 0x6c, 0x60, 0x67, 0x88, 0x75, 0x73, 0x2a, 0x4e, 0x75, 0x52, 0x3d,
  0x2f, 0x56, 0x2f, 0x12, 0xaa, 0xbd, 0x15, 0x73, 0xbf, 0x06, 0xc9, 0x40,
  0x54, 0xae, 0xfa, 0x81, 0xa7, 0x14, 0x17, 0xaf, 0x9a, 0x4a, 0x06, 0x6d,
  0x0f, 0xfc, 0x5a, 0xd6, 0x4b, 0xab, 0x28, 0xb1, 0xff, 0x60, 0x66, 0x1f,
  0x44, 0x37, 0xd4, 0x9e, 0x1e, 0x0d, 0x94, 0x12, 0xeb, 0x4b, 0xca, 0xcf,
  0x4c, 0xfd, 0x6a, 0x34, 0x08, 0x84, 0x79, 0x82, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x6f, 0x6f, 0x74,
  0x2d, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x58, 0x53, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x7a, 0x08, 0x94,
  0xad, 0x50, 0x5b, 0xb6, 0xc6, 0x7e, 0x2e, 0x5b, 0xdd, 0x6a, 0x3b, 0xec,
  0x43, 0xd9, 0x10, 0xc7, 0x72, 0xe9, 0xcc, 0x29, 0x0d, 0xa5, 0x85, 0x88,
  0xb7, 0x7d, 0xcc, 0x11, 0x68, 0x0b, 0xb3, 0xe2, 0x9f, 0x4e, 0xab, 0xbb,
  0x26, 0xe9, 0x8c, 0x26, 0x01, 0x98, 0x5c, 0x04, 0x1b, 0xb1, 0x43, 0x78,
  0xe6, 0x89, 0x18, 0x1a, 0xad, 0x77, 0x05, 0x68, 0xe9, 0x28, 0xa2, 0xb9,
  0x81, 0x67, 0xee, 0x3e, 0x10, 0xd0, 0x72, 0xbe, 0xef, 0x1f, 0xa2, 0x2f,
  0xa2, 0xaa, 0x3e, 0x13, 0xf1, 0x1e, 0x18, 0x36, 0xa9, 0x2a, 0x42, 0x81,
  0xef, 0x70, 0xaa, 0xf4, 0xe4, 0x62, 0x99, 0x82, 0x21, 0xc6, 0xfb, 0xb9,
  0xbd, 0xd0, 0x17, 0xe6, 0xac, 0x59, 0x04, 0x94, 0xe9, 0xce, 0xa9, 0x85,
  0x9c, 0xeb, 0x2d, 0x2a, 0x4c, 0x17, 0x66, 0xf2, 0xc3, 0x39, 0x12, 0xc5,
  0x8f, 0x14, 0xa8, 0x03, 0xe3, 0x6f, 0xcc, 0xdc, 0xcc, 0xdc, 0x13, 0xfd,
  0x7a, 0xe7, 0x7c, 0x7a, 0x78, 0xd9, 0x97, 0xe6, 0xac, 0xc3, 0x55, 0x57,
  0xe0, 0xd3, 0xe9, 0xeb, 0x64, 0xb4, 0x3c, 0x92, 0xf4, 0xc5, 0x0d, 0x67,
  0xa6, 0x02, 0xde, 0xb3, 0x91, 0xb0, 0x66, 0x61, 0xcd, 0x32, 0x88, 0x0b,
  0xd6, 0x49, 0x12, 0xaf, 0x1c, 0xbc, 0xb7, 0x16, 0x2a, 0x06, 0xf0, 0x25,
  0x65, 0xd3, 0xb0, 0xec, 0xe4, 0xfc, 0xec, 0xdd, 0xae, 0x8a, 0x49, 0x34,
  0xdb, 0x8e, 0xe6, 0x7f, 0x30, 0x17, 0x98, 0x62, 0x21, 0x15, 0x5d, 0x13,
  0x1c, 0x6c, 0x3f, 0x09, 0xab, 0x19, 0x45, 0xc2, 0x06, 0xac, 0x70, 0xc9,
  0x42, 0xb3, 0x6f, 0x49, 0xa1, 0x18, 0x3b, 0xcd, 0x78, 0xb6, 0xe4, 0xb4,
  0x7c, 0x6c, 0x5c, 0xac, 0x0f, 0x8d, 0x62, 0xf8, 0x97, 0xc6, 0x95, 0x3d,
  0xd1, 0x2f, 0x28, 0xb7, 0x0c, 0x5b, 0x7d, 0xf7, 0x51, 0x81, 0x9a, 0x98,
  0x34, 0x65, 0x26, 0x25, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const u8 ticket_rootca[] = {
  0x00, 0x01, 0x00, 0x03, 0x70, 0x41, 0x38, 0xef, 0xbb, 0xbd, 0xa1, 0x6a,
  0x98, 0x7d, 0xd9, 0x01, 0x32, 0x6d, 0x1c, 0x94, 0x59, 0x48, 0x4c, 0x88,
  0xa2, 0x86, 0x1b, 0x91, 0xa3, 0x12, 0x58, 0x7a, 0xe7, 0x0e, 0xf6, 0x23,
  0x7e, 0xc5, 0x0e, 0x10, 0x32, 0xdc, 0x39, 0xdd, 0xe8, 0x9a, 0x96, 0xa8,
  0xe8, 0x59, 0xd7, 0x6a, 0x98, 0xa6, 0xe7, 0xe3, 0x6a, 0x0c, 0xfe, 0x35,
  0x2c, 0xa8, 0x93, 0x05, 0x82, 0x34, 0xff, 0x83, 0x3f, 0xcb, 0x3b, 0x03,
  0x81, 0x1e, 0x9f, 0x0d, 0xc0, 0xd9, 0xa5, 0x2f, 0x80, 0x45, 0xb4, 0xb2,
  0xf9, 0x41, 0x1b, 0x67, 0xa5, 0x1c, 0x44, 0xb5, 0xef, 0x8c, 0xe7, 0x7b,
  0xd6, 0xd5, 0x6b, 0xa7, 0x57, 0x34, 0xa1, 0x85, 0x6d, 0xe6, 0xd4, 0xbe,
  0xd6, 0xd3, 0xa2, 0x42, 0xc7, 0xc8, 0x79, 0x1b, 0x34, 0x22, 0x37, 0x5e,
  0x5c, 0x77, 0x9a, 0xbf, 0x07, 0x2f, 0x76, 0x95, 0xef, 0xa0, 0xf7, 0x5b,
  0xcb, 0x83, 0x78, 0x9f, 0xc3, 0x0e, 0x3f, 0xe4, 0xcc, 0x83, 0x92, 0x20,
  0x78, 0x40, 0x63, 0x89, 0x49, 0xc7, 0xf6, 0x88, 0x56, 0x5f, 0x64, 0x9b,
  0x74, 0xd6, 0x3d, 0x8d, 0x58, 0xff, 0xad, 0xda, 0x57, 0x1e, 0x95, 0x54,
  0x42, 0x6b, 0x13, 0x18, 0xfc, 0x46, 0x89, 0x83, 0xd4, 0xc8, 0xa5, 0x62,
  0x8b, 0x06, 0xb6, 0xfc, 0x5d, 0x50, 0x7c, 0x13, 0xe7, 0xa1, 0x8a, 0xc1,
  0x51, 0x1e, 0xb6, 0xd6, 0x2e, 0xa5, 0x44, 0x8f, 0x83, 0x50, 0x14, 0x47,
  0xa9, 0xaf, 0xb3, 0xec, 0xc2, 0x90, 0x3c, 0x9d, 0xd5, 0x2f, 0x92, 0x2a,
  0xc9, 0xac, 0xdb, 0xef, 0x58, 0xc6, 0x02, 0x18, 0x48, 0xd9, 0x6e, 0x20,
  0x87, 0x32, 0xd3, 0xd1, 0xd9, 0xd9, 0xea, 0x44, 0x0d, 0x91, 0x62, 0x1c,
  0x7a, 0x99, 0xdb, 0x88, 0x43, 0xc5, 0x9c, 0x1f, 0x2e, 0x2c, 0x7d, 0x9b,
  0x57, 0x7d, 0x51, 0x2c, 0x16, 0x6d, 0x6f, 0x7e, 0x1a, 0xad, 0x4a, 0x77,
  0x4a, 0x37, 0x44, 0x7e, 0x78, 0xfe, 0x20, 0x21, 0xe1, 0x4a, 0x95, 0xd1,
  0x12, 0xa0, 0x68, 0xad, 0xa0, 0x19, 0xf4, 0x63, 0xc7, 0xa5, 0x56, 0x85,
  0xaa, 0xbb, 0x68, 0x88, 0xb9, 0x24, 0x64, 0x83, 0xd1, 0x8b, 0x9c, 0x80,
  0x6f, 0x47, 0x49, 0x18, 0x33, 0x17, 0x82, 0x34, 0x4a, 0x4b, 0x85, 0x31,
  0x33, 0x4b, 0x26, 0x30, 0x32, 0x63, 0xd9, 0xd2, 0xeb, 0x4f, 0x4b, 0xb9,
  0x96, 0x02, 0xb3, 0x52, 0xf6, 0xae, 0x40, 0x46, 0xc6, 0x9a, 0x5e, 0x7e,
  0x8e, 0x4a, 0x18, 0xef, 0x9b, 0xc0, 0xa2, 0xde, 0xd6, 0x13, 0x10, 0x41,
  0x70, 0x12, 0xfd, 0x82, 0x4c, 0xc1, 0x16, 0xcf, 0xb7, 0xc4, 0xc1, 0xf7,
  0xec, 0x71, 0x77, 0xa1, 0x74, 0x46, 0xcb, 0xde, 0x96, 0xf3, 0xed, 0xd8,
  0x8f, 0xcd, 0x05, 0x2f, 0x0b, 0x88, 0x8a, 0x45, 0xfd, 0xaf, 0x2b, 0x63,
  0x13, 0x54, 0xf4, 0x0d, 0x16, 0xe5, 0xfa, 0x9c, 0x2c, 0x4e, 0xda, 0x98,
  0xe7, 0x98, 0xd1, 0x5e, 0x60, 0x46, 0xdc, 0x53, 0x63, 0xf3, 0x09, 0x6b,
  0x2c, 0x60, 0x7a, 0x9d, 0x8d, 0xd5, 0x5b, 0x15, 0x02, 0xa6, 0xac, 0x7d,
  0x3c, 0xc8, 0xd8, 0xc5, 0x75, 0x99, 0x8e, 0x7d, 0x79, 0x69, 0x10, 0xc8,
  0x04, 0xc4, 0x95, 0x23, 0x50, 0x57, 0xe9, 0x1e, 0xcd, 0x26, 0x37, 0xc9,
  0xc1, 0x84, 0x51, 0x51, 0xac, 0x6b, 0x9a, 0x04, 0x90, 0xae, 0x3e, 0xc6,
  0xf4, 0x77, 0x40, 0xa0, 0xdb, 0x0b, 0xa3, 0x6d, 0x07, 0x59, 0x56, 0xce,
  0xe7, 0x35, 0x4e, 0xa3, 0xe9, 0xa4, 0xf2, 0x72, 0x0b, 0x26, 0x55, 0x0c,
  0x7d, 0x39, 0x43, 0x24, 0xbc, 0x0c, 0xb7, 0xe9, 0x31, 0x7d, 0x8a, 0x86,
  0x61, 0xf4, 0x21, 0x91, 0xff, 0x10, 0xb0, 0x82, 0x56, 0xce, 0x3f, 0xd2,
  0x5b, 0x74, 0x5e, 0x51, 0x94, 0x90, 0x6b, 0x4d, 0x61, 0xcb, 0x4c, 0x2e,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x6f, 0x6f, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x41, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7b, 0xe8, 0xef, 0x6c, 0xb2, 0x79, 0xc9, 0xe2, 0xee, 0xe1, 0x21, 0xc6,
  0xea, 0xf4, 0x4f, 0xf6, 0x39, 0xf8, 0x8f, 0x07, 0x8b, 0x4b, 0x77, 0xed,
  0x9f, 0x95, 0x60, 0xb0, 0x35, 0x82, 0x81, 0xb5, 0x0e, 0x55, 0xab, 0x72,
  0x11, 0x15, 0xa1, 0x77, 0x70, 0x3c, 0x7a, 0x30, 0xfe, 0x3a, 0xe9, 0xef,
  0x1c, 0x60, 0xbc, 0x1d, 0x97, 0x46, 0x76, 0xb2, 0x3a, 0x68, 0xcc, 0x04,
  0xb1, 0x98, 0x52, 0x5b, 0xc9, 0x68, 0xf1, 0x1d, 0xe2, 0xdb, 0x50, 0xe4,
  0xd9, 0xe7, 0xf0, 0x71, 0xe5, 0x62, 0xda, 0xe2, 0x09, 0x22, 0x33, 0xe9,
  0xd3, 0x63, 0xf6, 0x1d, 0xd7, 0xc1, 0x9f, 0xf3, 0xa4, 0xa9, 0x1e, 0x8f,
  0x65, 0x53, 0xd4, 0x71, 0xdd, 0x7b, 0x84, 0xb9, 0xf1, 0xb8, 0xce, 0x73,
  0x35, 0xf0, 0xf5, 0x54, 0x05, 0x63, 0xa1, 0xea, 0xb8, 0x39, 0x63, 0xe0,
  0x9b, 0xe9, 0x01, 0x01, 0x1f, 0x99, 0x54, 0x63, 0x61, 0x28, 0x70, 0x20,
  0xe9, 0xcc, 0x0d, 0xab, 0x48, 0x7f, 0x14, 0x0d, 0x66, 0x26, 0xa1, 0x83,
  0x6d, 0x27, 0x11, 0x1f, 0x20, 0x68, 0xde, 0x47, 0x72, 0x14, 0x91, 0x51,
  0xcf, 0x69, 0xc6, 0x1b, 0xa6, 0x0e, 0xf9, 0xd9, 0x49, 0xa0, 0xf7, 0x1f,
  0x54, 0x99, 0xf2, 0xd3, 0x9a, 0xd2, 0x8c, 0x70, 0x05, 0x34, 0x82, 0x93,
  0xc4, 0x31, 0xff, 0xbd, 0x33, 0xf6, 0xbc, 0xa6, 0x0d, 0xc7, 0x19, 0x5e,
  0xa2, 0xbc, 0xc5, 0x6d, 0x20, 0x0b, 0xaf, 0x6d, 0x06, 0xd0, 0x9c, 0x41,
  0xdb, 0x8d, 0xe9, 0xc7, 0x20, 0x15, 0x4c, 0xa4, 0x83, 0x2b, 0x69, 0xc0,
  0x8c, 0x69, 0xcd, 0x3b, 0x07, 0x3a, 0x00, 0x63, 0x60, 0x2f, 0x46, 0x2d,
  0x33, 0x80, 0x61, 0xa5, 0xea, 0x6c, 0x91, 0x5c, 0xd5, 0x62, 0x35, 0x79,
  0xc3, 0xeb, 0x64, 0xce, 0x44, 0xef, 0x58, 0x6d, 0x14, 0xba, 0xaa, 0x88,
  0x34, 0x01, 0x9b, 0x3e, 0xeb, 0xee, 0xd3, 0x79, 0x00, 0x01, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

static u32 kproc_offset_pid;
static u32 self_pid;
static u32 curr_kproc;
static Handle amHandle = 0;

static Result AM_OpenTicket(Handle *fileHandle)
{
	Result ret = 0;
	u32 *cmdbuf = getThreadCommandBuffer();

	cmdbuf[0] = 0x08010000;

	if((ret = svcSendSyncRequest(amHandle))!=0) return ret;

	*fileHandle = cmdbuf[3];
	
	return (Result)cmdbuf[1];
}

static Result AM_TicketAbortInstall(Handle fileHandle)
{
	Result ret = 0;
	u32 *cmdbuf = getThreadCommandBuffer();

	cmdbuf[0] = 0x08020002;
	cmdbuf[1] = ((1 << 26) - 0x4000000) | 0x10;
	cmdbuf[2] = fileHandle;

	if((ret = svcSendSyncRequest(amHandle))!=0) return ret;
	
	return (Result)cmdbuf[1];
}

static Result AM_TicketFinalizeInstall(Handle fileHandle)
{
	Result ret = 0;
	u32 *cmdbuf = getThreadCommandBuffer();

	cmdbuf[0] = 0x08030002;
	cmdbuf[1] = ((1 << 26) - 0x4000000) | 0x10;
	cmdbuf[2] = fileHandle;

	if((ret = svcSendSyncRequest(amHandle))!=0) return ret;
	
	return (Result)cmdbuf[1];
}

static Result AM_SetCertificates(int count, const u8 *certs[4], u32 sizes[4])
{
	Result ret = 0;
	u32 *cmdbuf = getThreadCommandBuffer();

	cmdbuf[0] = 0x08190108;
	cmdbuf[1] = count > 0 ? sizes[0] : 0;
	cmdbuf[2] = count > 1 ? sizes[1] : 0;
	cmdbuf[3] = count > 2 ? sizes[2] : 0;
	cmdbuf[4] = count > 3 ? sizes[3] : 0;
	cmdbuf[5] = 16 * (count > 0 ? sizes[0] : 0) + 10;
	cmdbuf[6] = count > 0 ? (u32)certs[0] : 0;
	cmdbuf[7] = 16 * (count > 1 ? sizes[1] : 0) + 10;
	cmdbuf[8] = count > 1 ? (u32)certs[1] : 0;
	cmdbuf[9] = 16 * (count > 2 ? sizes[2] : 0) + 10;
	cmdbuf[10] = count > 2 ? (u32)certs[2] : 0;
	cmdbuf[11] = 16 * (count > 3 ? sizes[3] : 0) + 10;
	cmdbuf[12] = count > 3 ? (u32)certs[3] : 0;

	if((ret = svcSendSyncRequest(amHandle))!=0) return ret;
	
	return (Result)cmdbuf[1];
}

static Result AM_DeleteTitle_(u8 mediatype, u64 titleID)
{
  Result ret = 0;
  u32 *cmdbuf = getThreadCommandBuffer();

  cmdbuf[0] = 0x041000C0;
  cmdbuf[1] = mediatype;
  cmdbuf[2] = titleID & 0xffffffff;
  cmdbuf[3] = (u32)(titleID >> 32);

  if((ret = svcSendSyncRequest(amHandle))!=0) return ret;

  return (Result)cmdbuf[1];
}

static Result AM_StartCiaInstall_(u8 mediatype, Handle *ciaHandle)
{
  Result ret = 0;
  u32 *cmdbuf = getThreadCommandBuffer();

  cmdbuf[0] = 0x04020040;
  cmdbuf[1] = mediatype;

  if((ret = svcSendSyncRequest(amHandle))!=0) return ret;

  *ciaHandle = cmdbuf[3];
  
  return (Result)cmdbuf[1];
}

static Result AM_CancelCIAInstall_(Handle *ciaHandle)
{
  Result ret = 0;
  u32 *cmdbuf = getThreadCommandBuffer();

  cmdbuf[0] = 0x04040002;
  cmdbuf[1] = 0x10;
  cmdbuf[2] = *ciaHandle;

  if((ret = svcSendSyncRequest(amHandle))!=0) return ret;

  return (Result)cmdbuf[1];
}

static Result AM_FinishCiaInstall_(u8 mediatype, Handle *ciaHandle)
{
  Result ret = 0;
  u32 *cmdbuf = getThreadCommandBuffer();

  cmdbuf[0] = 0x04050002;
  cmdbuf[1] = 0x10;
  cmdbuf[2] = *ciaHandle;

  if((ret = svcSendSyncRequest(amHandle))!=0) return ret;

  return (Result)cmdbuf[1];
}

static Result WriteToHandle(Handle fileHandle, const char *data, uint32_t size)
{
	Result res;
	uint32_t offset;
	uint32_t written;

	offset = 0;
	while (size)
	{
		if ((res = FSFILE_Write(fileHandle, &written, offset, 
								data+offset, size, FS_WRITE_FLUSH)) != 0)
		{
			return res;
		}
		offset += written;
		size -= written;
	}
	return 0;
}

static inline uint64_t swapLong(void *X)
{
	uint64_t x = *(uint64_t*) X;
	x = (x & 0x00000000FFFFFFFF) << 32 | (x & 0xFFFFFFFF00000000) >> 32;
	x = (x & 0x0000FFFF0000FFFF) << 16 | (x & 0xFFFF0000FFFF0000) >> 16;
	x = (x & 0x00FF00FF00FF00FF) << 8  | (x & 0xFF00FF00FF00FF00) >> 8;
	return x;
}

static void DeleteTitles()
{
  Result res;
  printf("Uninstalling titles.\n");
  //res = AM_DeleteTitle_(0, 0x0004001000021A00LL);
  res = AM_DeleteTitle_(0, 0x00040000000eca00LL);
  printf("AM_DeleteTitle: 0x%08X\n", res);
  res = AM_DeleteTitle_(0, 0x00040000000eca00LL);
  printf("AM_DeleteTitle: 0x%08X\n", res);
  printf("Done.\n");
}

static void InstallTickets()
{
  Result res;
  DIR *dp;
  struct dirent *ep;
  FILE *file;
  char path[1024];
  char *buffer;
  size_t buffer_size;
  off_t size;
  Handle ticket;
  int success;
  int total;

  printf("Setting certificates.\n");
  const u8 *certs[4] = {ticket_cert, ticket_rootca};
  u32 sizes[4] = {sizeof(ticket_cert), sizeof(ticket_rootca)};
  if ((res = AM_SetCertificates(2, certs, sizes)) != 0)
  {
    printf("Error setting certificates: 0x%08X\n", res);
    return;
  }

  if ((dp = opendir("sdmc:/tickets")) == NULL)
  {
    printf("Cannot find 'tickets' directory\n");
    return;
  }

  buffer = NULL;
  buffer_size = 0;
  success = 0;
  total = 0;
  while ((ep = readdir(dp)) != NULL)
  {
    //wait & swap
    gfxFlushBuffers();
    gfxSwapBuffersGpu();
    gspWaitForVBlank();

    printf("Found %s\n", ep->d_name);
    total++;
    snprintf(path, 1024, "%s/%s", "sdmc:/tickets", ep->d_name);
    if ((file = fopen(path,"rb")) == NULL)
    {
      printf("Failed to open %s\n", path);
      continue;
    }
    fseek(file, 0, SEEK_END);
    size = ftell(file);
    fseek(file, 0, SEEK_SET);
    if (size <= 0)
    {
      printf("Invalid ticket size: %d\n", size);
      fclose(file);
      continue;
    }
    if (size > buffer_size)
    {
      if ((buffer = (char *)realloc(buffer, size)) == NULL)
      {
        printf("No memory left\n");
        fclose(file);
        continue;
      }
    }
    if (fread(buffer, size, 1, file) < 1)
    {
      printf("Cannot read ticket\n");
      fclose(file);
      continue;
    }
    fclose(file);
    if (*(uint32_t*)buffer == 0x00010004)
    {
      printf("Installing %llX\n", swapLong(buffer+0x1DC));
    }
    else
    {
      printf("Installing %s\n", ep->d_name);
    }
    if ((res = AM_OpenTicket(&ticket)) != 0)
    //if ((res = AM9_InstallTikBegin()) != 0)
    {
      printf("Error opening ticket: %08X\n", res);
      continue;
    }
    if ((res = WriteToHandle(ticket, buffer, size)) != 0)
    //if ((res = AM9_InstallTikWrite(buffer, size)) != 0)
    {
      printf("Error writing ticket: %08X\n", res);
      AM_TicketAbortInstall(ticket);
      //AM9_InstallTikAbort();
      continue;
    }
    if ((res = AM_TicketFinalizeInstall(ticket)) != 0)
    //if ((res = AM9_InstallTikFinish()) != 0)
    {
      printf("Error finalizing ticket: %08X\n", res);
      continue;
    }
    printf("Installed %s\n", path);
    success++;
  }
  free(buffer);
  closedir(dp);

  printf("Installed %d/%d successfully.\n", success, total);
  printf("Finished.\n");
}

static void InstallCIAs()
{
  Result res;
  DIR *dp;
  struct dirent *ep;
  FILE *file;
  char path[1024];
  char *buffer;
  Handle ciaHandle;
  size_t read;
  int success;
  int total;

  if ((dp = opendir("sdmc:/cias")) == NULL)
  {
    printf("Cannot find 'cias' directory\n");
    return;
  }
  if ((buffer = (char *)malloc(0x800000)) == NULL)
  {
    printf("Cannot allocate memory\n");
    return;
  }

  success = 0;
  total = 0;
  while ((ep = readdir(dp)) != NULL)
  {
    //wait & swap
    gfxFlushBuffers();
    gfxSwapBuffersGpu();
    gspWaitForVBlank();

    printf("Found %s\n", ep->d_name);
    total++;
    snprintf(path, 1024, "%s/%s", "sdmc:/cias", ep->d_name);
    if ((file = fopen(path,"rb")) == NULL)
    {
      printf("Failed to open %s\n", path);
      continue;
    }
    if ((res = AM_StartCiaInstall_(1, &ciaHandle)) != 0)
    {
      printf("Cannot create CIA install handle: 0x%08X\n", res);
      fclose(file);
      continue;
    }
    while ((read = fread(buffer, 1, 0x800000, file)) > 0)
    {
      WriteToHandle(ciaHandle, buffer, read);
    }
    fclose(file);
    if (read < 0)
    {
      AM_CancelCIAInstall_(&ciaHandle);
      printf("Error installing CIA\n");
      continue;
    }
    if ((res = AM_FinishCiaInstall_(1, &ciaHandle)) != 0)
    {
      printf("Error finalizing CIA install: 0x%08X\n", res);
      continue;
    }
    printf("Installed %s\n", path);
    success++;
  }
  closedir(dp);
  free(buffer);

  printf("Installed %d/%d successfully.\n", success, total);
  printf("Finished.\n");
}

int main()
{
	Result res;

	// Initialize services
	gfxInitDefault(); // graphics
	hbInit();

	consoleInit(GFX_TOP, NULL);

  res = khaxInit();
  printf("khaxInit returned %08lx\n", res);

  SaveVersionConstants();
  PatchSrvAccess();
  printf("[%08X] Patched process\n", KernelBackdoor(PatchProcess));
  HB_FlushInvalidateCache(); // Just to be sure!
	if ((res = srvGetServiceHandle(&amHandle, "am:net")) != 0)
	{
		printf("Error 0x%08X initializing am.\n", res);
		svcSleepThread(10000000000ULL);
		goto end;
	}

  printf("Press A to install all tickets.\n");
  printf("Press X to uninstall titles.\n");
  printf("Press Y to install all CIAs.\n");
  printf("Press B to exit.\n");

	while(aptMainLoop())
	{

		//exit when user hits B
		hidScanInput();
		if(keysHeld()&KEY_B)break;
    if(keysHeld()&KEY_X)DeleteTitles();
		if(keysHeld()&KEY_A)InstallTickets();
    if(keysHeld()&KEY_Y)InstallCIAs();

		//wait & swap
		gfxFlushBuffers();
		gfxSwapBuffersGpu();
		gspWaitForVBlank();
	}

	// Exit services
	//returning from main() returns to hbmenu when run under ninjhax
	svcCloseHandle(amHandle);
end:
	//closing all services even more so
	hbExit();
	gfxExit();
	return 0;
}
